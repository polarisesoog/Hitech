#데이터 표현 단위
비트 : 정보를 표현하는 최소단위. 이진법 한 자리
바이트 : 8비트.(0~255 표현 가능) '00000000'(8자리비트) . 
일반적인 데이터의 기본단위
워드 : 2바이트 ; 16비트
니블 : 4비트 ; 
LSB : 최하위비트 오른쪽 끝(0번비트;첫번쨰 비트) 
MSB : 최상위비트 왼쪽 끝 
하위, 상위 : 절반기준 ; ex)하위니블? (0,1비트)


#진법 계산
0b : 2진법 표현 '0b10111' = (8비트에서) 나타내면 '0b00010111'
0x : 16진법 표현 
2진법 <->16진법 : 2진법4자리 = 16진법1자리
0000 0
0001 1 
0010 2
0011 3
0100 4
0101 5
0110 6
0111 7
1000 8
1001 9
1010 A
1011 B 
1100 C
1101 D
1110 E
1111 F


#SI 접두 단위계
10^3 K 키로
10^6 M 메가
10^9 G 기가
10^12 T 테라
10^15 P 페타
10^-3 m 밀리
10^-6 µ 마이크로
10^-9 n 나노
10^-12 p 피코


#논리 7가지
and                           <->nand
F = aㆍb
입력이 모두 1일때 출력 1

or                           <->nor
F = a+b
입력이 하나라도 1이면 출력1

not
F = ~a

x-or                          <->x-nor
F = a⊕b
특징 입력 1의 개수가
홀수이면 출력 1

조건 && 조건
값 & 값(비트 별 and 연산)

& : 특정한 위치의 값을  '0'으로 바꾸고 
나머지 비트의 값은 유지를 하고자 할 때
(0으로 바꾸고자 하는 위치에 '0'/ 유지하고자 하는 위치에 '1'을 넣어서 &)
ex) 10001111(0번3번 0으로?) & 11110110 = > 10000110(나머지 유지)

or : 특정한 위치의 값을  '1'으로 바꾸고 
나머지 비트의 값은 유지를 하고자 할 때
(1로 바꾸고자 하는 위치에 '1'/유지하고자 하는 위치에 '0' or)
ex) 00010001(상위 니블 1로?) or 11110000 = > 11110001(나머지 유지)

^(x-or) : 값 반전
(1을 사용하여 반전 ^)
ex) 11001111 ^ 11111111 = > 00110000(반전)


https://old-releases.ubuntu.com/releases/18.04.2/
server
https://cdimage.ubuntu.com/kubuntu/releases/18.04/release/
client
